// Code generated by sqlc. DO NOT EDIT.

import { Database } from "bun:sqlite";

export const getAuthorQuery = `-- name: GetAuthor :one
SELECT id, name, bio FROM authors
WHERE id = ? LIMIT 1`;

export interface GetAuthorArgs {
    id: number;
}

export interface GetAuthorRow {
    id: number;
    name: string;
    bio: string | null;
}

export async function getAuthor(database: Database, args: GetAuthorArgs): Promise<GetAuthorRow | null> {
    const stmt = database.prepare(getAuthorQuery);
    const rows = stmt.values(args.id);
    if (rows.length !== 1) {
        return null;
    }
    const row = rows[0];
    if (!row) {
        return null;
    }
    return {
        id: row[0] as number,
        name: row[1] as string,
        bio: row[2] as string | null
    };
}

export const listAuthorsQuery = `-- name: ListAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name`;

export interface ListAuthorsRow {
    id: number;
    name: string;
    bio: string | null;
}

export async function listAuthors(database: Database): Promise<ListAuthorsRow[]> {
    const stmt = database.prepare(listAuthorsQuery);
    const rows = stmt.values();
    return rows.map(row => ({
        id: row[0] as number,
        name: row[1] as string,
        bio: row[2] as string | null
    }));
}

export const createAuthorQuery = `-- name: CreateAuthor :exec
INSERT INTO authors (
  name, bio
) VALUES (
  ?, ?
)`;

export interface CreateAuthorArgs {
    name: string;
    bio: string | null;
}

/**
 * Create a new author.
 */
export async function createAuthor(database: Database, args: CreateAuthorArgs): Promise<void> {
    const stmt = database.prepare(createAuthorQuery);
    stmt.run(args.name, args.bio);
}

export const deleteAuthorQuery = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = ?`;

export interface DeleteAuthorArgs {
    id: number;
}

export async function deleteAuthor(database: Database, args: DeleteAuthorArgs): Promise<void> {
    const stmt = database.prepare(deleteAuthorQuery);
    stmt.run(args.id);
}

